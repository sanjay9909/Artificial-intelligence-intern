# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WdGn9_OBYjSEVNYhoD69IX6m58_CrGV8
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

# Load the diabetes dataset from the CSV file
diabetes_data = pd.read_csv('/content/sample_data/diabetes.csv')

# Separate features (X) and target (y) columns
X = diabetes_data.drop('Outcome', axis=1)
y = diabetes_data['Outcome']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# Data Preprocessing
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create and train the Decision Tree classifier with tuned hyperparameters
classifier = DecisionTreeClassifier(random_state=42, max_depth=15, min_samples_split=7)
classifier.fit(X_train, y_train)

# Evaluate the model accuracy on the test set
y_pred = classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Accuracy: {accuracy:.2f}")

# Rest of the code remains the same

# Function to get user input for new test data
def get_user_input():
    print("Enter the following data for prediction:\n")
    pregnancies = float(input("Pregnancies: "))
    glucose = float(input("Glucose: "))
    blood_pressure = float(input("Blood Pressure: "))
    skin_thickness = float(input("Skin Thickness: "))
    insulin = float(input("Insulin: "))
    bmi = float(input("BMI: "))
    diabetes_pedigree = float(input("Diabetes Pedigree Function: "))
    age = float(input("Age: "))

    return [[pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree, age]]

# Get user input for test data
user_input_data = get_user_input()

# Predict the outcome for the new test data
predicted_outcome = classifier.predict(user_input_data)[0]

# Print the prediction
if predicted_outcome == 0:
    print("\nThe model predicts that the person does not have diabetes.")
else:
    print("\nThe model predicts that the person has diabetes.")
print()