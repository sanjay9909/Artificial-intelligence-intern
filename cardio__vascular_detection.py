# -*- coding: utf-8 -*-
"""cardio _vascular detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Seo8igVHA16Da5pXgMdpYCzLtGR_ztDh
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import xgboost as xgb

# Load the CSV data
data = pd.read_csv('/content/sample_data/cardio_dataset.csv')

# Drop the 'id' column as it is not required for modeling
data.drop(columns=['id'], inplace=True)

# Convert age from days to years
data['age'] = data['age'] // 365

# Convert gender to categorical (0: Female, 1: Male)
data['gender'] = data['gender'].map({1: 0, 2: 1})

# Check for and handle any missing values (if present)
data.dropna(inplace=True)

# Split the data into features (X) and target (y)
X = data.drop(columns=['cardio'])
y = data['cardio']

# Show basic statistics of the dataset
print(data.describe())
print()

# Show correlation matrix
correlation_matrix = data.corr()
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()
print()

# Plot distributions of numerical features
num_features = ['age', 'height', 'weight', 'ap_hi', 'ap_lo']
for feature in num_features:
    sns.histplot(data[feature], kde=True)
    plt.title(f'Distribution of {feature}')
    plt.show()
print()
# Plot count of each category for categorical features
cat_features = ['cholesterol', 'gluc', 'smoke', 'alco', 'active']
for feature in cat_features:
    sns.countplot(data[feature])
    plt.title(f'Count of {feature}')
    plt.show()
print()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build the XGBoost model
model = xgb.XGBClassifier()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'\nAccuracy: {accuracy:.2f}')

# Print classification report and confusion matrix
print('\nClassification Report:')
print(classification_report(y_test, y_pred))

print('\nConfusion Matrix:')
print(confusion_matrix(y_test, y_pred))

print()
# Get user input to make predictions
user_input = {
    'age': int(input('Enter your age in years: ')),
    'gender': int(input('Enter your gender (0: Female, 1: Male): ')),
    'height': float(input('Enter your height in centimeters: ')),
    'weight': float(input('Enter your weight in kilograms: ')),
    'ap_hi': int(input('Enter your systolic blood pressure: ')),
    'ap_lo': int(input('Enter your diastolic blood pressure: ')),
    'cholesterol': int(input('Enter your cholesterol level (1: normal, 2: above normal, 3: well above normal): ')),
    'gluc': int(input('Enter your glucose level (1: normal, 2: above normal, 3: well above normal): ')),
    'smoke': int(input('Do you smoke? (0: No, 1: Yes): ')),
    'alco': int(input('Do you consume alcohol? (0: No, 1: Yes): ')),
    'active': int(input('Are you physically active? (0: No, 1: Yes): '))
}
print()
# Prepare the user input for prediction
user_data = pd.DataFrame(user_input, index=[0])
user_data['age'] = user_data['age'] // 365
user_data['gender'] = user_data['gender'].map({1: 0, 2: 1})
user_data = scaler.transform(user_data)

# Make prediction
prediction = model.predict(user_data)[0]
print()
if prediction == 0:
    print("Congratulations! You are predicted to be free of cardiovascular disease.")
else:
    print("You are predicted to have cardiovascular disease. Please consult a doctor for further evaluation.")